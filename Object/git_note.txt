在vscode中使用Git(参考地址：https://www.cnblogs.com/ashidamana/p/6122619.html)
用了git最方便的就是比如在公司写了很多代码后回到家打开vscode只需要点击一下pull就能全部同步过来。是不是很方便。。。。毕竟之前我都是拿u盘拷贝回家或者存到云盘再下载下来。。

我这里用的是国内的码云托管的代码，，github都是英文看不懂。。

因为vscode中带的有git管理功能，只需要学一点关于git的操作知识就够了。

首页要下载‘msysgit’然后安装到电脑要不然vscode中的git是不能用的。安装完成后主要使用Git Bash这个程序来操作

1、将代码放到码云

到码云里新建一个仓库，完成后码云会有一个命令教程按上面的来就行了
码云中的使用教程：
复制代码
Git 全局设置:

git config --global user.name "ASxx" 
git config --global user.email "123456789@qq.com"

创建 git 仓库:

mkdir wap
cd wap
git init
touch README.md
git add README.md
git commit -m "first commit"
git remote add origin https://git.oschina.net/name/package.git
git push -u origin master
已有项目?

cd existing_git_repo
git remote add origin https://git.oschina.net/name/package.git
git push -u origin master
复制代码
下面说下详细的本地操作步骤：

1、用vs打开你的项目文件夹


2、配置git
　　打开Git Bash输入以下命令

　　如果还没输入全局配置就先把这个全局配置输入上去

Git 全局设置:

git config --global user.name "ASxx" 
git config --global user.email "123456789@qq.com"
　　然后开始做提交代码到码云的配置

复制代码
cd d:/wamp/www/mall360/wap              //首先指定到你的项目目录下
git init
touch README.md
git add README.md
git commit -m "first commit"
git remote add origin https://git.oschina.net/name/package.git   //用你仓库的url
git push -u origin master  //提交到你的仓库
复制代码
　　正常情况下上面的命令执行完成后，本地文件夹会有一个隐藏的.git文件夹，云端你的仓库里应该会有一个README.md文件。

3、在vscode中提交代码到仓库
　　回到vs code打开git工作区就会看到所有代码显示在这里



点击+号，把所有文件提交到暂存区。

然后打开菜单选择--提交已暂存的



然后按提示随便在消息框里输入一个消息，再按ctrl+enter提交



然后把所有暂存的代码push云端，



点击后，会弹出让你输入账号密码，把你托管平台的账号密码输入上去就行了。。。

不出问题的话你整个项目就会提交到云端上了。

在vs中每次更新代码都会要输入账号密码，方便起见，可以配置一下让GIT记住密码账号。

git config --global credential.helper store   //在Git Bash输入这个命令就可以了
4、同步代码
　　这里说下平时修改代码后提交到云端的使用，和本地代码和云端同步

　　随便打开一个文件，添加一个注释



可以看到git图标有一个提示，打开git工作区可以看到就是修改的这个文件



然后点击右侧的+号，把他暂存起来。

再在消息框里输入消息，按ctrl+enter提交暂存



再点击push提交，代码就提交到云端了。



打开 码云就可以看到了。。

 

pull使用
　　比如当你在家里修改了代码提交到云端后，回到公司只需要用vscode打开项目点击菜单中的pull就可以同步过来了。

 

5、克隆你的项目到本地
　　回到家后想修改代码，但是电脑没有文件怎么办呢？  往下看

　　首先你电脑还是的有vscode 和  GIT，，然后用git把上面那些全局配置再执行一次，如下

git config --global user.name "ASxx"
git config --global user.email "123456789@qq.com"  

git config --global credential.helper store    
　　然后打开Git Bash输入以下命令

cd d:/test   //指定存放的目录
git clone https://git.oschina.net/name/test.git   //你的仓库地址


下载成功，然后就可以用vscode打开项目修改了，修改后提交的步骤还是和上面一样：暂存-提交暂存-push提交到云端就ok了。


Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

当出现分支冲突时：
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

用git log --graph命令可以看到分支合并图。





git push origin与git push -u origin master的区别
$ git push origin

上面命令表示，将当前分支推送到origin主机的对应分支。 

如果当前分支只有一个追踪分支，那么主机名都可以省略。 

$ git push 如果当前分支与多个主机存在追踪关系，那么这个时候-u选项会指定一个默认主机，这样后面就可以不加任何参数使用git push。

$ git push -u origin master 上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。

 不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。






*git 用远程覆盖本地*

本地有修改和提交，如何强制用远程的库更新更新。我尝试过用git pull -f，总是提示 You have not concluded your merge. (MERGE_HEAD exists)。

我需要放弃本地的修改，用远程的库的内容就可以，应该如何做？傻傻地办法就是用心的目录重新clone一个，正确的做法是什么？

正确的做法应该是：

git fetch --all
git reset --hard origin/master
git fetch 只是下载远程的库的内容，不做任何的合并git reset 把HEAD指向刚刚下载的最新的版本

参考链接：

http://stackoverflow.com/questions/1125968/force-git-to-overwrite-local-files-on-pull


Git:代码冲突常见解决方法

如果系统中有一些配置文件在服务器上做了配置修改,然后后续开发又新添加一些配置项的时候,

在发布这个配置文件的时候,会发生代码冲突:

error: Your local changes to the following files would be overwritten by merge:
        protected/config/main.php
Please, commit your changes or stash them before you can merge.

如果希望保留生产服务器上所做的改动,仅仅并入新配置项, 处理方法如下:

git stash
git pull
git stash pop
然后可以使用git diff -w +文件名 来确认代码自动合并的情况.


命令含义：
git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。
git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。
git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。
git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。



反过来,如果希望用代码库中的文件完全覆盖本地工作版本. 方法如下:

git reset --hard
git pull
其中git reset是针对版本,如果想针对文件回退本地修改,使用:
git checkout HEAD file/to/restore  